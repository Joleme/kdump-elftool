#
# This file contains a few gdb macros (user defined commands) to extract
# useful information from kernel crashdump (kdump) like stack traces of
# all the processes or a particular process and trapinfo.
#
# Code based on kernel: Documentation/kdump/gdbmacros.txt

define majver
       set $majver = init_uts_ns.name.release[0] - '0'
end
document majver
	Set the variable $majver to the major kernel version
end

define minver
	set $minver = init_uts_ns.name.release[2] - '0'
	if init_uts_ns.name.release[3] != '.'
		set $minver = $minver * 10 + init_uts_ns.name.release[3] - '0'
	end
end
document minver
	Set the variable $minver to the minor kernel version
end

define dmesg
	set $idx = log_first_idx
	while $idx != log_next_idx
		set $entry = (struct log *)(log_buf + $idx)
		if $entry->len == 0
			set $idx = 0
			loop_continue
		end
		set $usecs = $entry->ts_nsec / 1000
		printf "[%05lu.%06lu] ", $usecs / 1000000, $usecs % 1000000
		set $msg = (char *)($entry + 1)
		set $i = 0
		while $i < $entry->text_len
			printf "%c", *($msg + $i)
			set $i = $i + 1
		end
		printf "\n"
		set $idx += $entry->len
	end
end
document dmesg
	print the kernel log buffer
end

define prpid
	set $t=$arg0
	set $signal = (struct signal_struct *)($t->signal)
	set $tty = (struct tty_struct *)($signal->tty)

	if ($tty)
		set $tty_name = ($tty.name)
		printf "%d\t%s\t%-16s((struct task_struct *) 0x%llx)\n", \
			$t.pid, $tty_name, $t.comm, $t
	else
		printf "%d\t?\t%-16s((struct task_struct *) 0x%llx)\n", \
			$t.pid, $t.comm, $t
	end
end
document prpid
	print info for a pid given a task struct
end

define prthread
	set $thread=$arg0
	printf "    %d\t((struct task_struct *) 0x%llx)\n", \
			$thread.pid, $thread
end
document prthread
	print info for a thread given a task struct
end

define ps
	set $poff=((size_t)&((struct task_struct *)0)->tasks)
	set $toff=((size_t)&((struct task_struct *)0)->thread_node)
	set $init_p=(struct task_struct *)&init_task
	set $p=$init_p
	printf  "PID\ttty\tCMD\t\tTASK_STRUCT\n"

	while (1)
		prpid $p
		set $init_t=&$p->signal.thread_head
		set $t=$init_t->next
		while ($t != $init_t)
			set $tv=(struct task_struct *)(((char *) $t) - $toff)
			if ($tv != $p)
				prthread $tv
			end
			set $t=$t->next
		end
		set $p=(struct task_struct *)((char *)($p->tasks.next) - $poff)
		if ($p == $init_p)
			loop_break
		end
	end	
end 
document ps 
	Print processes and threads.  Threads for a process are indented
	underneath it, with just the pid and task struct.
end

define lsmod
	set $modules=&modules
	set $nextoff=(long) &(((struct module *) 0)->list.next)
	set $head=(long) &modules
	set $modl=(long) modules.next

	majver
	minver

	if (sizeof(long) == 4)
		printf "Name                 Base Addr  Module Data\n"
	else
		printf "Name                 Base Addr          Module Data\n"
	end
	while ($modl != $head)
		set $mod=(struct module *) ($modl - $nextoff)
		if ($majver > 4 || $majver == 4 && $minver >= 4)
			set $corestart = $mod->core_layout.base
		else
			set $corestart = $mod->module_core
		end
		if (sizeof(long) == 4)
		    printf "%-20s 0x%08llx ((struct module *) 0x%08llx)\n", \
			$mod->name, $corestart, $mod
		else
		    printf "%-20s 0x%016llx ((struct module *) 0x%016llx)\n", \
			$mod->name, $corestart, $mod
		end
		set $modl=(long) $mod->list.next
	end
end
document lsmod
	print list of modules and their info
end

define thread_vminfo_base
	printf "SYMBOL(init_task)=%p\n", &init_task
	printf "OFFSET(task_struct.stack)=%ld\n", &((struct task_struct *) 0)->stack
	printf "OFFSET(task_struct.tasks)=%ld\n", &((struct task_struct *) 0)->tasks
	printf "OFFSET(task_struct.thread_node)=%ld\n", &((struct task_struct *) 0)->thread_node
	printf "OFFSET(task_struct.signal)=%ld\n", &((struct task_struct *) 0)->signal
	printf "OFFSET(task_struct.pid)=%ld\n", &((struct task_struct *) 0)->pid
	printf "OFFSET(signal_struct.thread_head)=%ld\n", &((struct signal_struct *) 0)->thread_head
	printf "OFFSET(task_struct.thread)=%ld\n", &((struct task_struct *) 0)->thread
	printf "SIZE(pt_regs)=%ld\n", sizeof(struct pt_regs)
end
document thread_vminfo_base
	Dump information required by kdump-elftool to create a gdb thread
	per kernel thread instead of the default gdb thread per CPU.
	The vmlinux (with debugging) for the file must be loaded, but
	the kernel dump is not required.

	This is the base version that the arch-specific versions call
end

define thread_vminfo_mips
	thread_vminfo_base
	printf "SYMBOL(resume)=%lx\n", resume
end
document thread_vminfo_mips
	Dump information required by kdump-elftool to create a gdb thread
	per kernel thread instead of the default gdb thread per CPU.
	This is the MIPS version.  See thread_vminfo_base for more
	details.
end

define thread_vminfo_x86_64
	thread_vminfo_base
	# Add this in if you don't have it.
	#printf "SYMBOL(__thread_sleep_point)=0\n"
	printf "OFFSET(thread_struct.sp)=%ld\n", &((struct thread_struct *) 0)->sp
	printf "SIZE(context_switch_frame)=1\n"
end
document thread_vminfo_x86_64
	Dump information required by kdump-elftool to create a gdb thread
	per kernel thread instead of the default gdb thread per CPU.
	This is the MIPS version.  See thread_vminfo_base for more
	details.

	Make sure to fix SIZE(context_switch_frame) and possibly
	SYMBOL(__thread_sleep_point) to be the actual values for your
	system.  Read the man page for details.
end

define thread_vminfo_arm
	thread_vminfo_base
	printf "OFFSET(thread_info.cpu_context)=%ld\n", &((struct thread_info *) 0)->cpu_context
	printf "SYMBOL(__switch_to)=%lx\n", __switch_to
end
document thread_vminfo_arm
	Dump information required by kdump-elftool to create a gdb thread
	per kernel thread instead of the default gdb thread per CPU.
	This is the ARM version.  See thread_vminfo_base for more
	details.
end

define thread_vminfo_arm64
	thread_vminfo_base
	printf "OFFSET(thread.cpu_context)=%ld\n", &((struct thread_struct *) 0)->cpu_context
end
document thread_vminfo_arm
	Dump information required by kdump-elftool to create a gdb thread
	per kernel thread instead of the default gdb thread per CPU.
	This is the ARM64 version.  See thread_vminfo_base for more
	details.
end

define thread_vminfo_i386
	thread_vminfo_base
	printf "OFFSET(thread_struct.sp)=%ld\n", &((struct thread_struct *) 0)->sp
	printf "OFFSET(thread_struct.ip)=%ld\n", &((struct thread_struct *) 0)->ip
end
document thread_vminfo_i386
	Dump information required by kdump-elftool to create a gdb thread
	per kernel thread instead of the default gdb thread per CPU.
	This is the i386 version.  See thread_vminfo_base for more
	details.
end
