From 654a604d3e6973e764ceace08881276da7ca2b56 Mon Sep 17 00:00:00 2001
From: Corey Minyard <cminyard@mvista.com>
Date: Sat, 1 Feb 2014 01:10:28 -0600
Subject: [PATCH] kdump mips: Add necessary items for core extraction

MIPS is quite complicated dealing with pages, there are lots of options
and lots of values that are dynamically calculated.  We need to pass those
in so a vmcore file can be properly generated from a kdump.

Signed-off-by: Corey Minyard <cminyard@mvista.com>
---
 arch/mips/kernel/machine_kexec.c | 30 ++++++++++++++++++++++++++++++
 include/linux/kexec.h            |  3 +++
 2 files changed, 33 insertions(+)

diff --git a/arch/mips/kernel/machine_kexec.c b/arch/mips/kernel/machine_kexec.c
index 992e184..0fbe13d 100644
--- a/arch/mips/kernel/machine_kexec.c
+++ b/arch/mips/kernel/machine_kexec.c
@@ -12,6 +12,7 @@
 
 #include <asm/cacheflush.h>
 #include <asm/page.h>
+#include <asm/pgtable.h>
 
 extern const unsigned char relocate_new_kernel[];
 extern const size_t relocate_new_kernel_size;
@@ -108,3 +109,32 @@ machine_kexec(struct kimage *image)
 #endif
 	((noretfun_t) reboot_code_buffer)();
 }
+
+void arch_crash_save_vmcoreinfo(void)
+{
+	VMCOREINFO_NUMBER(PAGE_SHIFT);
+	VMCOREINFO_NUMBER(PGD_ORDER);
+#if defined(CONFIG_32BIT) || !defined(CONFIG_PAGE_SIZE_64KB)
+	VMCOREINFO_NUMBER(PMD_ORDER);
+#endif
+	VMCOREINFO_NUMBER(PTE_ORDER);
+	VMCOREINFO_NUMBER(_PAGE_PRESENT);
+#ifdef CONFIG_MIPS_HUGE_TLB_SUPPORT
+	VMCOREINFO_NUMBER(_PAGE_HUGE);
+#endif
+#ifdef CONFIG_64BIT
+#ifdef CONFIG_MAPPED_KERNEL
+	VMCOREINFO_ADDRESS(_text);
+	VMCOREINFO_ADDRESS(_end);
+	VMCOREINFO_ADDRESS(phys_to_kernel_offset);
+#endif
+	VMCOREINFO_ADDRESS(CKSEG0);
+	VMCOREINFO_ADDRESS(CKSSEG);
+#else /* CONFIG_64BIT */
+	VMCOREINFO_ADDRESS(PHYS_OFFSET);
+#endif /* CONFIG_64BIT */
+
+	VMCOREINFO_ADDRESS(PAGE_OFFSET);
+	VMCOREINFO_ADDRESS(IO_BASE);
+	VMCOREINFO_NUMBER(_PFN_SHIFT);
+}
diff --git a/include/linux/kexec.h b/include/linux/kexec.h
index a756419..e1267a4 100644
--- a/include/linux/kexec.h
+++ b/include/linux/kexec.h
@@ -161,6 +161,9 @@ unsigned long paddr_vmcoreinfo_note(void);
 	vmcoreinfo_append_str("NUMBER(%s)=%ld\n", #name, (long)name)
 #define VMCOREINFO_CONFIG(name) \
 	vmcoreinfo_append_str("CONFIG_%s=y\n", #name)
+#define VMCOREINFO_ADDRESS(name) \
+	vmcoreinfo_append_str("ADDRESS(%s)=%llx\n", #name, \
+			      (unsigned long long) name)
 
 extern struct kimage *kexec_image;
 extern struct kimage *kexec_crash_image;
-- 
1.8.3.1

